name: Deploy to GCP with Terraform (Infrastructure as Code)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  PROJECT_ID: MultimodalBot
  GCP_REGION: us-central1
  SERVICE_NAME: multimodal-chat-backend
  ARTIFACT_REGISTRY_REPO: multimodal-chat
  IMAGE_NAME: multimodal-chat-backend

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    outputs:
      image: ${{ steps.meta.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker authentication
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Extract metadata
        id: meta
        run: |
          IMAGE_TAG=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Building image: ${IMAGE_TAG}"

      - name: Build and push Docker image
        run: |
          docker build -t ${{ steps.meta.outputs.image }} .
          docker push ${{ steps.meta.outputs.image }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ needs.build.outputs.image }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --port=3001 \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=1 \
            --timeout=300 \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,PORT=3001,LOG_LEVEL=info" \
            --set-secrets="MONGO_URL=MONGO_URL:latest,REDIS_URL=REDIS_URL:latest,JWT_PUBLIC_KEY=JWT_PUBLIC_KEY:latest,GOOGLE_CLIENT_ID=GOOGLE_CLIENT_ID:latest,GOOGLE_CLIENT_SECRET=GOOGLE_CLIENT_SECRET:latest,GOOGLE_API_KEY=GOOGLE_API_KEY:latest,CLOUDINARY_CLOUD_NAME=CLOUDINARY_CLOUD_NAME:latest,CLOUDINARY_API_KEY=CLOUDINARY_API_KEY:latest,CLOUDINARY_API_SECRET=CLOUDINARY_API_SECRET:latest"

      - name: Get service URL
        id: service
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
          echo "url=${SERVICE_URL}" >> $GITHUB_OUTPUT
          echo "ðŸš€ Service deployed at: ${SERVICE_URL}"

      - name: Test deployment
        run: |
          sleep 30
          curl -f ${{ steps.service.outputs.url }}/health || exit 1
          echo "âœ… Deployment successful and healthy!"
